-- Configuration

local voiced_actor_blacklist = { "exhausted", "fear" }
local opt = z_saint_actor_breathing.opt

-- State

local speaking_cooldown = 0
local state_cooldown = 0
local sound_ref = nil

-- Hook

function update_cooldown(cooldown, is_state)
	if is_state then
		state_cooldown = time_global() + (cooldown or 2000)
	else
		speaking_cooldown = time_global() + (cooldown or 2000)
	end
end

function play_sound(file, sound_volume)
	sound_ref = sound_object(file)

	sound_ref:play(db.actor, 0, sound_object.s2d)
	sound_ref.volume = sound_volume
end

function current_sound_length()
	if sound_ref then
		return sound_ref:length()
	end

	return 0
end

function hook_functions()
	if not z_saint_actor_breathing then
		log("Saint's Natural Breathing script not found, skipping voiced actor hooks.")
		return
	end

	if not AGDD_voiced_actor then
		log("Voiced actor framework not found, skipping voiced actor hooks.")
		return
	end

	log("Patching voiced actor framework, hooking into actor speak function.")

	local get_muffle_status = function() -- changes muffle condition of the sound
		if z_saint_actor_breathing.get_is_masked() then
			AGDD_voiced_actor.muffle = "m_"
			agdd_voiced_actor.muffle = "m_"
		else
			AGDD_voiced_actor.muffle = ""
			agdd_voiced_actor.muffle = ""
		end
	end

	local actor_speak = function(file, sound_volume, cooldown, chance, requires_squad, has_priority,
								 ignore_conditionals, is_state)
		log("Intercepting actor speak call for file '" .. file .. "' Voiced Actor Framework.")
		local actor = db.actor

		if not actor or not actor:alive() then
			return
		end

		-- Check blacklist, skip playback for sounds already handled in breathing script.
		for _, blacklisted_word in ipairs(voiced_actor_blacklist) do
			if string.find(file, blacklisted_word) then
				log("Filtering out blacklisted sound '" .. file .. "' from voiced actor playback.")
				return
			end
		end

		if not z_saint_actor_breathing.did_exceed_action_cooldown() and not string.find(file, "death") and not string.find(file, "intimidate") then
			log("Preventing voiced actor sound '" .. file .. "' playback due to item use cooldowns.")
			return
		end

		local health = actor.health
		local psy_health = arszi_psy.get_psy_health()
		local is_masked = z_saint_actor_breathing.get_is_masked()

		-- Clamp chance value, some may be excessively high (e.g. 2000 for sanity)
		chance = clamp(chance or 100, 0, 100)

		-- Alter regular hurt sounds, block above higher health threshold.
		if string.find(file, "pain") then
			sound_volume = opt.speaking_sound_volume
		elseif string.find(file, "death") then
			sound_volume = opt.speaking_sound_volume
		elseif string.find(file, "intimidate") then
			sound_volume = opt.speaking_sound_volume * 1.8
		elseif string.find(file, "hunger") or string.find(file, "thirst") then
			chance = chance / 4
			sound_volume = opt.body_noises_default_sound_volume
		elseif string.find(file, "tired") then
			chance = chance / 4
			sound_volume = opt.speaking_sound_volume * 0.5
		elseif string.find(file, "sanity") then
			if psy_health > 0.2 then
				update_cooldown(cooldown, is_state)
				return
			end

			chance = chance / 25
			sound_volume = opt.speaking_sound_volume * 1.8
		elseif string.find(file, "hurt") then
			if health > 0.25 then
				update_cooldown(cooldown, is_state)
				return
			end

			chance = chance / 5
			sound_volume = opt.speaking_sound_volume
		end

		if
			(is_state and time_global() < state_cooldown) or
			(not is_state and not has_priority and time_global() < speaking_cooldown) or
			(not ignore_conditionals and (actor:is_talking() or not actor:alive())) or
			(requires_squad and not AGDD_voiced_actor.is_actor_in_squad())
		then
			log("Skipping voiced actor sound '" ..
				file ..
				"', due to cooldowns (time " ..
				time_global() ..
				", state_cooldown: " ..
				state_cooldown ..
				", speaking_cooldown: " ..
				speaking_cooldown .. "), conditional checks, or squad requirement (" .. tostring(requires_squad) .. ").")
			return
		end

		-- Augment random chance for playback, replace voiced actor script logic.
		local rolled_chance = math.random(1, 100)

		if chance and chance < rolled_chance then
			log("Skipping voiced actor sound '" .. file .. "' due to chance roll " .. chance .. " < " .. rolled_chance)
			update_cooldown(cooldown, is_state)
			return
		end

		-- Fix sounds using masked variant when player is not wearing a mask.

		local sound_path_components = split_path_components(file)
		local sound_file_name = sound_path_components[#sound_path_components]
		local sound_is_masked = string.find(sound_file_name, "m_") == 1

		if sound_is_masked and not is_masked then
			log("Fixing masked sound variant for player not wearing a mask in sound file '" .. file .. "'.")
			sound_file_name = sound_file_name:gsub("\\m_", "\\")
		elseif not sound_is_masked and is_masked then
			log("Fixing unmasked sound variant for player wearing a mask in sound file '" .. file .. "'.")
			sound_file_name = "m_" .. sound_file_name
		end

		sound_path_components[#sound_path_components] = sound_file_name
		file = table.concat(sound_path_components, "\\")

		local sound_length = current_sound_length()
		local sound_cooldown = sound_length + 1000

		if is_masked then
			sound_volume = sound_volume * opt.masked_breathing_sound_coeff
		end

		log("Muting and suspending breathing, voiced actor sound playback '" ..
			file .. "', setting cooldown to " .. sound_cooldown .. "ms (via sound length " .. sound_length .. "ms.")
		z_saint_actor_breathing.stop_and_suspend_breathing(sound_cooldown)

		play_sound(file, sound_volume)
		update_cooldown(cooldown, is_state)
	end

	agdd_voiced_actor.actor_speak = actor_speak
	agdd_voiced_actor.get_muffle_status = get_muffle_status

	AGDD_voiced_actor.actor_speak = actor_speak
	AGDD_voiced_actor.get_muffle_status = get_muffle_status
end

-- Utility

function log(message)
	if not opt.debug_mode then
		return
	end

	printf("SAB/VAI - " .. message)
end

function split_path_components(path)
	-- Split the path by backslash
	local components = {}
	for component in string.gmatch(path, "[^\\]+") do
		table.insert(components, component)
	end

	return components
end

-- Init

hook_functions()
