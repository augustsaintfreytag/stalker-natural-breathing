-- References

local is_respi_on = actor_effects.is_respi_on
local is_mask_on = actor_effects.is_mask_on

-- State

local opt = {}
local snd_cooldown_time = 0

local last_actor_speed = 0
local last_actor_position = { x = 0, y = 0, z = 0 }
local last_actor_speed_time = 0
local actor_speaking_cooldown_time = 0
local last_cam_dist = 0

local breath_snd = nil

local SND_KIND = {
	DEFAULT = "breath",
	GAS_MASK = "gas_breath",
	HEALTH_RELATED = "health",
	STAMINA_RELATED = "run"
}

local SND_DEFAULT_BREATH_MODE = {
	DEFAULT = "1",
	DISTRESS = "2",
	FEAR = "3"
}

local SND_HEALTH_BREATH_MODE = {
	LIGHTLY_WOUNDED = "1",
	SEVERELY_WOUNDED = "2"
}

local SND_RUN_BREATH_MODE = {
	LIGHTLY_EXHAUSTED = "1",
	MODERATELY_EXHAUSTED = "2",
	SEVERELY_EXHAUSTED = "3"
}

local snd_index_by_kind = {
	[SND_KIND.DEFAULT] = 0,
	[SND_KIND.GAS_MASK] = 0,
	[SND_KIND.HEALTH_RELATED] = 0,
	[SND_KIND.STAMINA_RELATED] = 0
}

local num_snds_by_kind = {
	[SND_KIND.DEFAULT] = 8,
	[SND_KIND.GAS_MASK] = 8,
	[SND_KIND.HEALTH_RELATED] = 8,
	[SND_KIND.STAMINA_RELATED] = 6
}

function tick_breath_snd_index(kind)
	local current_index = snd_index_by_kind[kind]
	local num_snds = num_snds_by_kind[kind]

	current_index = current_index + 1
	if current_index > num_snds then
		current_index = 1
	end

	snd_index_by_kind[kind] = current_index

	return current_index
end

function reset_breath_snd_index(kind)
	snd_index_by_kind[kind] = 0
end

-- Init

function init_options()
	opt.speed = {}

	local ini_eff = ini_file("plugins\\actor_effects.ltx")
	local settings_speed = ini_eff:line_count("settings_speed")

	for i = 0, settings_speed - 1 do
		local _, id, value = ini_eff:r_line_ex("settings_speed", i, "", "")

		if id and value then
			opt.speed[id] = tonumber(value)
		end
	end

	opt.health = {
		injury_snd = nil,
		level1 = ini_eff:r_float_ex("settings_health", "level1"),
		level2 = ini_eff:r_float_ex("settings_health", "level2")
	}

	opt.cam_dist = ini_eff:r_float_ex("settings", "cam_dist") or 4

	opt.speaking_cooldown = 3000

	opt.breathing_sound_volume = 0.8
	opt.breathing_sound_volume_jitter = 0.1

	opt.enable_breathing_sound = ui_options.get("sound/environment/breathing_sound")
end

-- Actor Value Updates

function update_actor_cam_distance(actor)
	last_cam_dist = actor:bone_position("bip01_head"):distance_to_sqr(device().cam_pos)
end

function update_actor_speed(actor)
	local current_position = actor:position()
	local current_speed = (current_position.x - last_actor_position.x) ^ 2 +
		(current_position.y - last_actor_position.y) ^ 2 + (current_position.z - last_actor_position.z) ^ 2

	last_actor_position.x = current_position.x
	last_actor_position.y = current_position.y
	last_actor_position.z = current_position.z

	last_actor_speed = current_speed
end

function update_actor_speed_time(actor)
	if (last_actor_speed > opt.speed.mini) then
		last_actor_speed_time = last_actor_speed_time + opt.speed.inc
	elseif last_actor_speed_time > opt.speed.dec then
		last_actor_speed_time = last_actor_speed_time - opt.speed.dec
	end

	last_actor_speed_time = math.min(32, last_actor_speed_time + actor.bleeding * opt.speed.k_bleed)
end

-- Actor Breathing Tick

function update_breathing(actor)
	if (not opt.enable_breathing_sound) then
		return
	end

	update_actor_cam_distance(actor)
	update_actor_speed(actor)
	update_actor_speed_time(actor)

	if is_respi_on() then
		play_sound_breath_mask(actor)
	else
		play_sound_breath(actor)
	end
end

-- Actor Breathing (Masked)

function play_sound_breath_mask(actor)
	local current_time = time_global()

	if (current_time <= snd_cooldown_time) or (current_time < actor_speaking_cooldown_time) then
		return
	end

	local snd_index = tick_breath_snd_index(SND_KIND.GAS_MASK)
	local snd_mode = tostring((actor.health > 0.2) and math.ceil((1.01 - actor.power) * 3 + last_actor_speed_time / 8) or
		8)

	play_sound_breath_with_parameters(actor, SND_KIND.GAS_MASK, snd_mode, snd_index, 1.25)
end

-- Actor Breathing (Unmasked)

function play_sound_breath(actor)
	local current_time = time_global()
	local actor_health = actor.health

	if (current_time < snd_cooldown_time) or (current_time < actor_speaking_cooldown_time) or (actor_health < 0) then
		return
	end

	if (actor_health <= opt.health.level1) then
		-- Player is badly wounded, play sounds for injury.
		local snd_index = tick_breath_snd_index(SND_KIND.HEALTH_RELATED)
		play_sound_breath_with_parameters(actor, SND_KIND.HEALTH_RELATED, SND_HEALTH_BREATH_MODE.SEVERELY_WOUNDED,
			snd_index, 1.1)

		return
	end

	if (actor_health <= opt.health.level2 and actor_health > opt.health.level1) then
		local snd_index = tick_breath_snd_index(SND_KIND.HEALTH_RELATED)
		play_sound_breath_with_parameters(actor, SND_KIND.HEALTH_RELATED, SND_HEALTH_BREATH_MODE.LIGHTLY_WOUNDED,
			snd_index, 1.25)

		return
	end

	-- Player is healthy, only play sounds for stamina or running.
	if (last_actor_speed_time > opt.speed.time_mini) or (actor.power < opt.speed.stamina) then
		-- Player is running or low on stamina
		local snd_mode = clamp(math.ceil(3 / (3 * actor.power)), 1, 3)
		local snd_index = tick_breath_snd_index(SND_KIND.STAMINA_RELATED) -- SND_RUN_BREATH_MODE (1â€“3)

		printf("Playing stamina-related breathing sound with mode " ..
			tostring(snd_mode) ..
			" and index " ..
			tostring(snd_index) ..
			" (stamina " .. tostring(actor.power) .. ", last speed time " .. tostring(last_actor_speed_time) .. ").")
		play_sound_breath_with_parameters(actor, SND_KIND.STAMINA_RELATED, snd_mode, snd_index, 1.25)
		return
	end

	-- Player is not out of stamina, reset breathing sound cycle.
	reset_breath_snd_index(SND_KIND.STAMINA_RELATED)

	-- Player can breathe normally (default mode).
	local snd_index = tick_breath_snd_index(SND_KIND.DEFAULT)
	local snd_mode = SND_DEFAULT_BREATH_MODE.DEFAULT

	printf("Playing default breathing sound with mode " ..
		tostring(snd_mode) .. " and index " .. tostring(snd_index) .. ".")
	play_sound_breath_with_parameters(actor, SND_KIND.DEFAULT, snd_mode, snd_index, 1.35)
end

-- Playback

function play_sound_breath_with_parameters(actor, kind, mode, index, pause_factor)
	local current_time = time_global()

	snd_cooldown_time = current_time + last_breath_snd_length() * pause_factor

	breath_snd = sound_object("actor\\" .. kind .. "_" .. mode .. "_" .. index)
	breath_snd:play(actor, 0, sound_object.s2d)
	breath_snd.volume = actor_sound_volume()
end

function last_breath_snd_length()
	if not breath_snd then
		return 4000
	end

	return breath_snd:length()
end

function actor_sound_volume(is_masked)
	if last_cam_dist > opt.cam_dist then
		return 0
	end

	local amplifier = (is_masked or false) and 0.5 or 1
	local jitter = opt.breathing_sound_volume_jitter * math.random(-50, 50) / 100

	return (1 - last_cam_dist / opt.cam_dist) * amplifier * opt.breathing_sound_volume + jitter
end

-- Conditions

function calculate_fear_factor()
	local is_night = get_is_night()
	local is_underground = get_is_underground()
	local is_in_combat = get_is_in_combat()
	local is_surge = get_is_surge()
	local is_in_safe_space = get_is_in_safe_space()
	local number_of_nearby_threats = get_number_of_nearby_threats()

	local fear_value = 0

	fear_value = fear_value + clamp(number_of_nearby_threats, 0, 2)

	if is_in_combat then
		fear_value = fear_value + 2
	end

	if is_night then
		fear_value = fear_value + 1
	end

	if is_underground then
		fear_value = fear_value + 2
	end

	if is_surge and not is_underground then
		fear_value = fear_value + 2
	end

	if is_in_safe_space then
		fear_value = fear_value / 2
	end

	local fear_factor = fear_value / 10

	printf("Calculated aggregate player fear factor: " ..
		tostring(fear_factor) ..
		" (from value " ..
		fear_value ..
		") with factors (in combat: " ..
		tostring(is_in_combat) .. ", night: " .. tostring(is_night) .. ", underground: " ..
		tostring(is_underground) ..
		", surge: " .. tostring(is_surge) .. ", safe space: " .. tostring(is_in_safe_space) ..
		", nearby threats: " .. tostring(number_of_nearby_threats) .. ").")

	return fear_factor
end

function get_is_surge()
	return xr_conditions.surge_started()
end

function get_is_night()
	return level.get_time_hours() < 3 or level.get_time_hours() > 22
end

function get_is_underground()
	return GetEvent("underground")
end

function get_is_in_safe_space()
	return GetEvent("current_safe_cover")
end

function get_is_in_combat()
	if not AGDD_voiced_actor then
		return false
	end

	return AGDD_voiced_actor.is_actor_in_combat() or false
end

function get_number_of_nearby_threats()
	local max_radius = 50
	local npc_list = {} -- Records of { id, name, distance (unknown) }

	level.iterate_nearest(db.actor:position(), max_radius, function(obj)
		if (IsStalker(obj) or IsMonster(obj)) and obj:alive() and obj:relation(db.actor) == game_object.enemy then
			table.insert(npc_list, {
				id = obj:id(),
				name = obj:character_name()
			})
		end
	end)

	return #npc_list
end

-- Hook

function hook_functions()
	actor_effects.Update_Breathing = update_breathing
	actor_effects.play_sound_breath_mask = play_sound_breath_mask
	actor_effects.play_sound_breath = play_sound_breath

	if AGDD_voiced_actor then
		local original_actor_speak = AGDD_voiced_actor.actor_speak
		AGDD_voiced_actor.actor_speak = function(file, sound_volume, cooldown, chance, requires_squad, has_priority,
												 ignore_conditionals, is_state)
			original_actor_speak(file, sound_volume, cooldown, chance, requires_squad, has_priority, ignore_conditionals,
				is_state)
			actor_speaking_cooldown_time = time_global() + opt.speaking_cooldown

			if breath_snd then
				breath_snd.volume = 0
			end
		end
	end
end

function on_game_start()
	init_options()
	hook_functions()
end
