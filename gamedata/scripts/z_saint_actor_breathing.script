-- References

local is_respi_on = actor_effects.is_respi_on
local is_mask_on = actor_effects.is_mask_on

-- State

local snd_tg = 0

local last_actor_speed = 0
local last_actor_position = { x = 0, y = 0, z = 0 }
local last_actor_speed_time = 0

local health_play = 0
local breath_sound = 0
local gas_play = 0
local run_play = 0

-- Actor Tick

function update_actor_speed(actor)
	local current_position = actor:position()
	local current_speed = (current_position.x - last_actor_position.x) ^ 2 +
		(current_position.y - last_actor_position.y) ^ 2 + (current_position.z - last_actor_position.z) ^ 2

	last_actor_position.x = current_position.x
	last_actor_position.y = current_position.y
	last_actor_position.z = current_position.z

	last_actor_speed = current_speed
end

function update_actor_speed_time(actor)
	if (last_actor_speed > opt.speed.mini) then
		last_actor_speed_time = last_actor_speed_time + opt.speed.inc
	elseif last_actor_speed_time > opt.speed.dec then
		last_actor_speed_time = last_actor_speed_time - opt.speed.dec
	end

	last_actor_speed_time = math.min(32, last_actor_speed_time + actor.bleeding * opt.speed.k_bleed)
end

function update_breathing(actor)
	if (not opt.enable_breathing_sound) then
		return
	end

	update_actor_speed(actor)
	update_actor_speed_time(actor)

	if is_respi_on() then
		play_sound_breath_mask(actor)
	else
		play_sound_breath(actor)
	end
end

function play_sound_breath_mask(actor)
	local tg = time_global()
	if (tg > snd_tg) then
		gas_play = gas_play + 1
		if (gas_play > 8) then
			gas_play = 1
		end
		breath_sound = sound_object("actor\\gas_breath_" ..
			tostring((actor.health > 0.2) and math.ceil((1.01 - actor.power) * 3 + last_actor_speed_time / 8) or 8) ..
			"_" .. gas_play)
		snd_tg = tg + breath_sound:length() * 1.25
		breath_sound:play(actor, 0, sound_object.s2d)
		breath_sound.volume = (cam_dist > opt.cam_dist) and 0 or (1 - cam_dist / opt.cam_dist) * 0.5
	end
end

function play_sound_breath(actor)
	local tg = time_global()
	local health = actor.health

	if (tg < snd_tg) or (health < 0) then
		return
	end

	if (health > opt.health.level2) then
		if (last_actor_speed_time > opt.speed.time_mini) or (actor.power < opt.speed.stamina) or (run_play == 1) then
			run_play = run_play + 1
			if (run_play > 2) then
				run_play = 1
			end
			breath_sound = sound_object("actor\\run_" .. math.ceil(3 * last_actor_speed_time / 44) .. "_" .. run_play)
			breath_sound:play(actor, 0, sound_object.s2d)
			breath_sound.volume = (cam_dist > opt.cam_dist) and 0 or (1 - cam_dist / opt.cam_dist)
			snd_tg = tg + breath_sound:length() * 1.15
		else
			run_play = 2
		end
		return
	end

	if (health <= opt.health.level1) then
		health = 1
		if (math.random() < 0.1) then
			health_play = 0
		else
			health_play = health_play + 1
			if (health_play > 4) then
				health_play = 1
			end
		end
	else
		health = 2
		health_play = health_play + 1
		if (health_play > 4) then
			health_play = 1
		end
	end

	snd_tg = tg + (opt.health.injury_snd["_" .. health .. "_" .. health_play] or 4000)
	breath_sound = sound_object("actor\\health_" .. health .. "_" .. health_play)
	breath_sound:play(actor, 0, sound_object.s2d)
	breath_sound.volume = (cam_dist > opt.cam_dist) and 0 or (1 - cam_dist / opt.cam_dist)
end
